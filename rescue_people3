import GUI
import HAL
import utm
import time
import math

g = 5
a = 0.5

# coords: 40º16'48.2" N ; 40º16'47.23" N
# coords: 3º49'3.5" W ; 3º49'1.78"

b_coord_n = 40 + 16/60 + 48.2/3600
v_coord_n = 40 + 16/60 + 47.23/3600

b_coord_w = -(3 + 49/60 + 3.5/3600)
v_coord_w = -(3 + 49/60 + 1.78/3600)

coords_utm_b = utm.from_latlon(b_coord_n, b_coord_w)
coords_utm_v = utm.from_latlon(v_coord_n, v_coord_w)

w = coords_utm_v[0] - coords_utm_b[0]
n = coords_utm_v[1] - coords_utm_b[1]


x, y, z = HAL.get_position()

distancia = ((w - x)**2 + (n - y)**2)**0.5
HAL.takeoff(g)


while distancia > 1:
    HAL.set_cmd_pos(w, n, g, a)
    imgFrontal = HAL.get_frontal_image()
    imgLateral = HAL.get_ventral_image()
    GUI.showImage(imgFrontal)
    GUI.showLeftImage(imgLateral)

    x, y, z = HAL.get_position()
    distancia = ((w - x)**2 + (n - y)**2)**0.5
    print("Distancia restante: ", distancia)


import cv2
import numpy as np

num_caras = 5
caras_encontradas = 0
radio = 0
pi = 3.141592

def coordenadas_circunferencia(x0, y0, r):
    coordenadas_circunferencia = []
    for t in range(0, 359):
        t = 2*pi*t/360
        x = r * math.cos(t)
        y = r * math.sin(t)
        coordenadas_circumferencia += (x, y)
    return coordenadas_circunferencia

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

while num_caras > caras_encontradas:
    radio += 1
    coordenadas = coordenadas_circunferencia(w, n, radio)
    for c in range(len(coordenadas)):
        x, y = coordenadas[c]
        distancia = ((w - x)**2 + (n - y)**2)**0.5
        while distancia > 1:
            HAL.set_cmd_pos(x, y, g, a)
            imgFrontal = HAL.get_frontal_image()
            imgLateral = HAL.get_ventral_image()
            GUI.showImage(imgFrontal)
            GUI.showLeftImage(imgLateral)

            # Frontal

            gray_frontal = cv2.cvtColor(imgFrontal, cv2.COLOR_BGR2GRAY)

            faces_frontal = face_cascade.detectMultiScale(gray_frontal, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

            if len(faces_frontal) > 0:
                print(f"Detected")
                for (a, b, l, h) in faces_frontal:
                    cv2.rectangle(image, (a, b), (a + l, b + h), (255, 0, 0), 2)
                cv2.imshow('Face Detection', image)

            else:
                print("No faces detected!")

            # Lateral

            gray_lateral = cv2.cvtColor(imgLateral, cv2.COLOR_BGR2GRAY)

            faces_lateral = face_cascade.detectMultiScale(gray_lateral, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

            if len(faces_lateral) > 0:
                print(f"Detected")
                for (a, b, l, h) in faces_lateral:
                    cv2.rectangle(image, (a, b), (a + l, b + h), (255, 0, 0), 2)
                cv2.imshow('Face Detection', image)
                caras_encontradas

            else:
                print("No faces detected!")

            # Moving again

            x, y, z = HAL.get_position()
            distancia = ((w - x)**2 + (n - y)**2)**0.5
            print("Ángulo: ", c)
            print("Radio: ", radio)
            print("Distancia restante: ", distancia)




cv2.waitKey(0)
cv2.destroyAllWindows()

# haarcascade = cv2.Load("/home/usuario/Descargas/haarcascade_frontalface_default.xml")

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

image = cv2.imread('0.jpg')



'''
let src = cv.imread('canvasInput');
let gray = new cv.Mat();
cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);
let faces = new cv.RectVector();
let eyes = new cv.RectVector();
let faceCascade = new cv.CascadeClassifier();
let eyeCascade = new cv.CascadeClassifier();
// load pre-trained classifiers
faceCascade.load('haarcascade_frontalface_default.xml');
eyeCascade.load('haarcascade_eye.xml');
// detect faces
let msize = new cv.Size(0, 0);
faceCascade.detectMultiScale(gray, faces, 1.1, 3, 0, msize, msize);
for (let i = 0; i < faces.size(); ++i) {
    let roiGray = gray.roi(faces.get(i));
    let roiSrc = src.roi(faces.get(i));
    let point1 = new cv.Point(faces.get(i).x, faces.get(i).y);
    let point2 = new cv.Point(faces.get(i).x + faces.get(i).width,
                              faces.get(i).y + faces.get(i).height);
    cv.rectangle(src, point1, point2, [255, 0, 0, 255]);
    // detect eyes in face ROI
    eyeCascade.detectMultiScale(roiGray, eyes);
    for (let j = 0; j < eyes.size(); ++j) {
        let point1 = new cv.Point(eyes.get(j).x, eyes.get(j).y);
        let point2 = new cv.Point(eyes.get(j).x + eyes.get(j).width,
                                  eyes.get(j).y + eyes.get(j).height);
        cv.rectangle(roiSrc, point1, point2, [0, 0, 255, 255]);
    }
    roiGray.delete(); roiSrc.delete();
}
cv.imshow('canvasOutput', src);
src.delete(); gray.delete(); faceCascade.delete();
eyeCascade.delete(); faces.delete(); eyes.delete();
'''

while True:
    pass
